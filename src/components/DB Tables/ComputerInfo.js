import React, { useEffect, useState } from 'react'
import NavBar from '../Landing Pages/NavBar';

import {  Box ,  Grid} from '@mui/material'
import { DataGrid, GridToolbar  } from '@mui/x-data-grid';
//import { makeStyles, ThemeProvider } from '@mui/styles';
//import { createTheme } from '@mui/system';

function ComputerInfo() {

    const[compInfo,setCompInfo]=useState([])

    useEffect( ()=> {
        fetch("http://localhost:8080/compInfo/getAll")
        .then(res=>res.json())
        .then((result)=>{
            setCompInfo(result);
        })
    },[])

    const tableStyle={ marginTop:"10vh" }
    const columns = [
        { field: 'id', headerName: 'ID', width: 150 },
        { field: 'WindowsBuildLabEx', headerName: 'Windows Build Lab Ex', width: 280 },
        { field: 'WindowsCurrentVersion', headerName: 'Windows Current Version', width: 280 },
        { field: 'WindowsEditionId', headerName: 'Windows Edition Id', width: 280 },
        { field: 'WindowsInstallationType', headerName: 'Windows Installation Type', width: 280 },
        { field: 'WindowsInstallDateFromRegistry', headerName: 'Windows Install Date From Registry', width: 280 },
        { field: 'WindowsProductId', headerName: 'Windows Product Id', width: 280 },
        { field: 'WindowsProductName', headerName: 'Windows Product Name', width: 280 },
        { field: 'WindowsRegisteredOrganization', headerName: 'Windows Registered Organization', width: 280 },
        { field: 'WindowsRegisteredOwner', headerName: 'Windows Registered Owner', width: 280 },
        { field: 'WindowsSystemRoot', headerName: 'Windows System Root', width: 280 },
        { field: 'WindowsVersion', headerName: 'Windows Version', width: 280 },
        { field: 'BiosCharacteristics', headerName: 'Bios Characteristics', width: 280 },
        { field: 'BiosBIOSVersion', headerName: 'Bios BIOS Version', width: 280 },
        { field: 'BiosBuildNumber', headerName: 'Bios Build Number', width: 280 },
        { field: 'BiosCaption', headerName: 'Bios Caption', width: 280 },
        { field: 'BiosCodeSet', headerName: 'Bios CodeSet', width: 280 },
        { field: 'BiosCurrentLanguage', headerName: 'Bios Current Language', width: 280 },
        { field: 'BiosDescription', headerName: 'Bios Description', width: 280 },
        { field: 'BiosEmbeddedControllerMajorVersion', headerName: 'Bios Embedded Controller Major Version', width: 280 },
        { field: 'BiosEmbeddedControllerMinorVersion', headerName: 'Bios Embedded Controller Minor Version', width: 280 },
        { field: 'BiosFirmwareType', headerName: 'Bios Firmware Type', width: 280 },
        { field: 'BiosIdentificationCode', headerName: 'Bios Identification Code', width: 280 },
        { field: 'BiosInstallableLanguages', headerName: 'Bios Installable Languages', width: 280 },
        { field: 'BiosInstallDate', headerName: 'Bios Install Date', width: 280 },
        { field: 'BiosLanguageEdition', headerName: 'Bios Language Edition', width: 280 },
        { field: 'BiosListOfLanguages', headerName: 'Bios List Of Languages', width: 280 },
        { field: 'BiosManufacturer', headerName: 'Bios Manufacturer', width: 280 },
        { field: 'BiosName', headerName: 'Bios Name', width: 280 },
        { field: 'BiosOtherTargetOS', headerName: 'Bios Other TargetOS', width: 280 },
        { field: 'BiosPrimaryBIOS', headerName: 'Bios Primary BIOS', width: 280 },
        { field: 'BiosReleaseDate', headerName: 'Bios Release Date', width: 280 },
        { field: 'BiosSeralNumber', headerName: 'Bios Seral Number', width: 280 },
        { field: 'BiosSMBIOSBIOSVersion', headerName: 'Bios SMBIOS BIOS Version', width: 280 },
        { field: 'BiosSMBIOSMajorVersion', headerName: 'Bios SMBIOS Major Version', width: 280 },
        { field: 'BiosSMBIOSMinorVersion', headerName: 'Bios SMBIOS Minor Version', width: 280 },
        { field: 'BiosSMBIOSPresent', headerName: 'Bios SMBIOS Present', width: 280 },
        { field: 'BiosSoftwareElementState', headerName: 'Bios Software Element State', width: 280 },
        { field: 'BiosStatus', headerName: 'Bios Status', width: 280 },
        { field: 'BiosSystemBiosMajorVersion', headerName: 'Bios System Bios Major Version', width: 280 },
        { field: 'BiosSystemBiosMinorVersion', headerName: 'Bios System Bios Minor Version', width: 280 },
        { field: 'BiosTargetOperatingSystem', headerName: 'Bios Target Operating System', width: 280 },
        { field: 'BiosVersion', headerName: 'Bios Version', width: 280 },
        { field: 'CsAdminPasswordStatus', headerName: 'Cs Admin Password Status', width: 280 },
        { field: 'CsAutomaticManagedPagefile', headerName: 'Cs Automatic Managed Page file', width: 280 },
        { field: 'CsAutomaticResetBootOption', headerName: 'Cs Automatic Reset Boot Option', width: 280 },
        { field: 'CsAutomaticResetCapability', headerName: 'Cs Automatic Reset Capability', width: 280 },
        { field: 'CsBootOptionOnLimit', headerName: 'Cs Boot Option On Limit', width: 280 },
        { field: 'CsBootOptionOnWatchDog', headerName: 'Cs Boot Option On Watch Dog', width: 280 },
        { field: 'CsBootROMSupported', headerName: 'Cs Boot ROM Supported', width: 280 },
        { field: 'CsBootStatus', headerName: 'Cs Boot Status', width: 280 },
        { field: 'CsBootupState', headerName: 'Cs Bootup State', width: 280 },
        { field: 'CsCaption', headerName: 'Cs Caption', width: 280 },
        { field: 'CsChassisBootupState', headerName: 'Cs Chassis Bootup State', width: 280 },
        { field: 'CsChassisSKUNumber', headerName: 'Cs Chassis SKU Number', width: 280 },
        { field: 'CsCurrentTimeZone', headerName: 'Cs Current Time Zone', width: 280 },
        { field: 'CsDaylightInEffect', headerName: 'Cs Daylight In Effect', width: 280 },
        { field: 'CsDescription', headerName: 'Cs Description', width: 280 },
        { field: 'CsDNSHostName', headerName: 'Cs DNS HostName', width: 280 },
        { field: 'CsDomain', headerName: 'Cs Domain', width: 280 },
        { field: 'CsDomainRole', headerName: 'Cs Domain Role', width: 280 },
        { field: 'CsEnableDaylightSavingsTime', headerName: 'Cs Enable Daylight Savings Time', width: 280 },
        { field: 'CsFrontPanelResetStatus', headerName: 'Cs Front Panel Reset Status', width: 280 },
        { field: 'CsHypervisorPresent', headerName: 'Cs Hypervisor Present', width: 280 },
        { field: 'CsInfraredSupported', headerName: 'Cs Infrared Supported', width: 280 },
        { field: 'CsInitialLoadInfo', headerName: 'Cs Initial Load Info', width: 280 },
        { field: 'CsInstallDate', headerName: 'Cs Install Date', width: 280 },
        { field: 'CsKeyboardPasswordStatus', headerName: 'Cs Keyboard Password Status', width: 280 },
        { field: 'CsLastLoadInfo', headerName: 'Cs Last Load Info', width: 280 },
        { field: 'CsManufacturer', headerName: 'Cs Manufacturer', width: 280 },
        { field: 'CsModel', headerName: 'Cs Model', width: 280 },
        { field: 'CsName', headerName: 'Cs Name', width: 280 },
        { field: 'CsNetworkAdapters', headerName: 'Cs Network Adapters', width: 280 },
        { field: 'CsNetworkServerModeEnabled', headerName: 'Cs Network Server Mode Enabled', width: 280 },
        { field: 'CsNumberOfLogicalProcessors', headerName: 'Cs Number Of Logical Processors', width: 280 },
        { field: 'CsNumberOfProcessors', headerName: 'Cs Number Of Processors', width: 280 },
        { field: 'CsProcessors', headerName: 'Cs Processors', width: 280 },
        { field: 'CsOEMStringArray', headerName: 'Cs OEM String Array', width: 280 },
        { field: 'CsPartOfDomain', headerName: 'Cs Part Of Domain', width: 280 },
        { field: 'CsPauseAfterReset', headerName: 'Cs Pause After Reset', width: 280 },
        { field: 'CsPCSystemType', headerName: 'Cs PC System Type', width: 280 },
        { field: 'CsPCSystemTypeEx', headerName: 'Cs PC System Type Ex', width: 280 },
        { field: 'CsPowerManagementCapabilities', headerName: 'Cs Power Management Capabilities', width: 280 },
        { field: 'CsPowerManagementSupported', headerName: 'Cs Power Management Supported', width: 280 },
        { field: 'CsPowerOnPasswordStatus', headerName: 'Cs Power On Password Status', width: 280 },
        { field: 'CsPowerState', headerName: 'Cs Power State', width: 280 },
        { field: 'CsPowerSupplyState', headerName: 'Cs Power Supply State', width: 280 },
        { field: 'CsPrimaryOwnerContact', headerName: 'Cs Primary Owner Contact', width: 280 },
        { field: 'CsPrimaryOwnerName', headerName: 'Cs Primary Owner Name', width: 280 },
        { field: 'CsResetCapability', headerName: 'Cs Reset Capability', width: 280 },
        { field: 'CsResetCount', headerName: 'Cs Reset Count', width: 280 },
        { field: 'CsResetLimit', headerName: 'Cs Reset Limit', width: 280 },
        { field: 'CsRoles', headerName: 'Cs Roles', width: 280 },
        { field: 'CsStatus', headerName: 'Cs Status', width: 280 },
        { field: 'CsSupportContactDescription', headerName: 'Cs Support Contact Description', width: 280 },
        { field: 'CsSystemFamily', headerName: 'Cs System Family', width: 280 },
        { field: 'CsSystemSKUNumber', headerName: 'Cs System SKU Number', width: 280 },
        { field: 'CsSystemType', headerName: 'Cs System Type', width: 280 },
        { field: 'CsThermalState', headerName: 'Cs Thermal State', width: 280 },
        { field: 'CsTotalPhysicalMemory', headerName: 'Cs Total Physical Memory', width: 280 },
        { field: 'CsPhyicallyInstalledMemory', headerName: 'Cs Phyically Installed Memory', width: 280 },
        { field: 'CsUserName', headerName: 'Cs User Name', width: 280 },
        { field: 'CsWakeUpType', headerName: 'Cs Wake Up Type', width: 280 },
        { field: 'CsWorkgroup', headerName: 'Cs Workgroup', width: 280 },
        { field: 'OsName', headerName: 'Os Name', width: 280 },
        { field: 'OsType', headerName: 'Os Type', width: 280 },
        { field: 'OsOperatingSystemSKU', headerName: 'Os Operating System SKU', width: 280 },
        { field: 'OsVersion', headerName: 'Os Version', width: 280 },
        { field: 'OsCSDVersion', headerName: 'Os CSD Version', width: 280 },
        { field: 'OsBuildNumber', headerName: 'Os Build Number', width: 280 },
        { field: 'OsHotFixes', headerName: 'Os HotFixes', width: 280 },
        { field: 'OsBootDevice', headerName: 'Os BootDevice', width: 280 },
        { field: 'OsSystemDevice', headerName: 'Os SystemDevice', width: 280 },
        { field: 'OsSystemDirectory', headerName: 'Os SystemDirectory', width: 280 },
        { field: 'OsSystemDrive', headerName: 'Os SystemDrive', width: 280 },
        { field: 'OsWindowsDirectory', headerName: 'Os Windows Directory', width: 280 },
        { field: 'OsCountryCode', headerName: 'Os Country Code', width: 280 },
        { field: 'OsCurrentTimeZone', headerName: 'Os Current TimeZone', width: 280 },
        { field: 'OsLocaleID', headerName: 'Os Locale ID', width: 280 },
        { field: 'OsLocale', headerName: 'Os Locale', width: 280 },
        { field: 'OsLocalDateTime', headerName: 'Os Local Date Time', width: 280 },
        { field: 'OsLastBootUpTime', headerName: 'Os Last BootUp Time', width: 280 },
        { field: 'OsUptime', headerName: 'Os Uptime', width: 280 },
        { field: 'OsBuildType', headerName: 'Os Build Type', width: 280 },
        { field: 'OsCodeSet', headerName: 'Os CodeSet', width: 280 },
        { field: 'OsDataExecutionPreventionAvailable', headerName: 'Os Data Execution Prevention Available', width: 280 },
        { field: 'OsDataExecutionPrevention32BitApplications', headerName: 'Os Data Execution Prevention 32Bit Applications', width: 280 },
        { field: 'OsDataExecutionPreventionDrivers', headerName: 'Os Data Execution Prevention Drivers', width: 280 },
        { field: 'OsDataExecutionPreventionSupportPolicy', headerName: 'Os Data Execution Prevention Support Policy', width: 280 },
        { field: 'OsDebug', headerName: 'Os Debug', width: 280 },
        { field: 'OsDistributed', headerName: 'Os Distributed', width: 280 },
        { field: 'OsEncryptionLevel', headerName: 'Os Encryption Level', width: 280 },
        { field: 'OsForegroundApplicationBoost', headerName: 'Os Foreground Application Boost', width: 280 },
        { field: 'OsTotalVisibleMemorySize', headerName: 'Os Total Visible Memory Size', width: 280 },
        { field: 'OsFreePhysicalMemory', headerName: 'Os Free Physical Memory', width: 280 },
        { field: 'OsTotalVirtualMemorySize', headerName: 'Os Total Virtual Memory Size', width: 280 },
        { field: 'OsFreeVirtualMemory', headerName: 'Os Free Virtual Memory', width: 280 },
        { field: 'OsInUseVirtualMemory', headerName: 'Os InUse Virtual Memory', width: 280 },
        { field: 'OsTotalSwapSpaceSize', headerName: 'Os Total Swap Space Size', width: 280 },
        { field: 'OsSizeStoredInPagingFiles', headerName: 'Os Size Stored In Paging Files', width: 280 },
        { field: 'OsFreeSpaceInPagingFiles', headerName: 'Os Free Space In Paging Files', width: 280 },
        { field: 'OsPagingFiles', headerName: 'Os Paging Files', width: 280 },
        { field: 'OsHardwareAbstractionLayer', headerName: 'Os Hardware Abstraction Layer', width: 280 },
        { field: 'OsInstallDate', headerName: 'Os Install Date', width: 280 },
        { field: 'OsManufacturer', headerName: 'Os Manufacturer', width: 280 },
        { field: 'OsMaxNumberOfProcesses', headerName: 'Os Max Number Of Processes', width: 280 },
        { field: 'OsMaxProcessMemorySize', headerName: 'Os Max Process Memory Size', width: 280 },
        { field: 'OsMuiLanguages', headerName: 'Os Mui Languages', width: 280 },
        { field: 'OsNumberOfLicensedUsers', headerName: 'Os Number Of Licensed Users', width: 280 },
        { field: 'OsNumberOfProcesses', headerName: 'Os Number Of Processes', width: 280 },
        { field: 'OsNumberOfUsers', headerName: 'Os Number Of Users', width: 280 },
        { field: 'OsOrganization', headerName: 'Os Organization', width: 280 },
        { field: 'OsArchitecture', headerName: 'Os Architecture', width: 280 },
        { field: 'OsLanguage', headerName: 'Os Language', width: 280 },
        { field: 'OsProductSuites', headerName: 'Os Product Suites', width: 280 },
        { field: 'OsOtherTypeDescription', headerName: 'Os Other Type Description', width: 280 },
        { field: 'OsPAEEnabled', headerName: 'Os PAE Enabled', width: 280 },
        { field: 'OsPortableOperatingSystem', headerName: 'Os Portable Operating System', width: 280 },
        { field: 'OsPrimary', headerName: 'Os Primary', width: 280 },
        { field: 'OsProductType', headerName: 'Os Product Type', width: 280 },
        { field: 'OsRegisteredUser', headerName: 'Os Registered User', width: 280 },
        { field: 'OsSerialNumber', headerName: 'Os Serial Number', width: 280 },
        { field: 'OsServicePackMajorVersion', headerName: 'Os Service Pack Major Version', width: 280 },
        { field: 'OsServicePackMinorVersion', headerName: 'Os Service Pack Minor Version', width: 280 },
        { field: 'OsStatus', headerName: 'Os Status', width: 280 },
        { field: 'OsSuites', headerName: 'Os Suites', width: 280 },
        { field: 'OsServerLevel', headerName: 'Os Server Level', width: 280 },
        { field: 'KeyboardLayout', headerName: 'Keyboard Layout', width: 280 },
        { field: 'TimeZone', headerName: 'Time Zone', width: 280 },
        { field: 'LogonServer', headerName: 'Logon Server', width: 280 },
        { field: 'PowerPlatformRole', headerName: 'Power Platform Role', width: 280 },
        { field: 'HyperVisorPresent', headerName: 'HyperVisor Present', width: 280 },
        { field: 'HyperVRequirementDataExecutionPreventionAvailable', headerName: 'HyperV Requirement Data Execution Prevention Available', width: 280 },
        { field: 'HyperVRequirementSecondLevelAddressTranslation', headerName: 'HyperV Requirement Second Level Address Translation', width: 280 },
        { field: 'HyperVRequirementVirtualizationFirmwareEnabled', headerName: 'HyperV Requirement Virtualization Firmware Enabled', width: 280 },
        { field: 'HyperVRequirementVMMonitorModeExtensions', headerName: 'HyperV Requirement VM Monitor Mode Extensions', width: 280 },
        { field: 'DeviceGuardSmartStatus', headerName: 'Device GuardSmart Status', width: 280 },
        { field: 'DeviceGuardRequiredSecurityProperties', headerName: 'Device Guard Required Security Properties', width: 280 },
        { field: 'DeviceGuardAvailableSecurityProperties', headerName: 'Device Guard Available Security Properties', width: 280 },
        { field: 'DeviceGuardSecurityServicesConfigured', headerName: 'Device Guard Security Services Configured', width: 280 },
        { field: 'DeviceGuardSecurityServicesRunning', headerName: 'Device Guard Security Services Running', width: 280 },
        { field: 'DeviceGuardCodeIntegrityPolicyEnforcementStatus', headerName: 'Device Guard Code Integrity Policy Enforcement Status', width: 280 },
        { field: 'DeviceGuardUserModeCodeIntegrityPolicyEnforcementStatus', headerName: 'Device Guard User Mode Code Integrity Policy Enforcement Status', width: 280 },
    ]

    const rows = compInfo.map( vals => (
        {id: vals.id , 
            WindowsBuildLabEx: vals.windowsBuildLabEx, 
            WindowsCurrentVersion: vals.windowsCurrentVersion,
            WindowsEditionId: vals.windowsEditionId,
            WindowsInstallationType: vals.windowsInstallationType,
            WindowsInstallDateFromRegistry: vals.windowsInstallDateFromRegistry,
            WindowsProductId: vals.windowsProductId,
            WindowsProductName: vals.windowsProductName,
            WindowsRegisteredOrganization: vals.windowsRegisteredOrganization,
            WindowsRegisteredOwner: vals.windowsRegisteredOwner,
            WindowsSystemRoot: vals.windowsSystemRoot,
            WindowsVersion: vals.windowsVersion,
            BiosCharacteristics: vals.biosCharacteristics,
            BiosBIOSVersion: vals.biosBIOSVersion,
            BiosBuildNumber:vals.biosBuildNumber,
            BiosCaption: vals.biosCaption,
            BiosCodeSet: vals.biosCodeSet,
            BiosCurrentLanguage: vals.biosCurrentLanguage,
            BiosDescription:vals.biosDescription,
            BiosEmbeddedControllerMajorVersion: vals.biosEmbeddedControllerMajorVersion,
            BiosEmbeddedControllerMinorVersion: vals.biosEmbeddedControllerMinorVersion,
            BiosFirmwareType: vals.biosFirmwareType,
            BiosIdentificationCode:vals.biosIdentificationCode,
            BiosInstallableLanguages: vals.biosInstallableLanguages,
            BiosInstallDate: vals.biosInstallDate,
            BiosLanguageEdition: vals.biosLanguageEdition,
            BiosListOfLanguages:vals.biosListOfLanguages,
            BiosManufacturer: vals.biosManufacturer,
            BiosName: vals.biosName,
            BiosOtherTargetOS: vals.biosOtherTargetOS,
            BiosPrimaryBIOS:vals.biosPrimaryBIOS,
            BiosReleaseDate: vals.biosReleaseDate,
            BiosSeralNumber: vals.biosSeralNumber,
            BiosSMBIOSBIOSVersion: vals.biosSMBIOSBIOSVersion,
            BiosSMBIOSMajorVersion:vals.biosSMBIOSMajorVersion,
            BiosSMBIOSMinorVersion: vals.biosSMBIOSMinorVersion,
            BiosSMBIOSPresent: vals.biosSMBIOSPresent,
            BiosSoftwareElementState: vals.biosSoftwareElementState,
            BiosStatus:vals.biosStatus,
            BiosSystemBiosMajorVersion: vals.biosSystemBiosMajorVersion,
            BiosSystemBiosMinorVersion: vals.biosSystemBiosMinorVersion,
            BiosTargetOperatingSystem: vals.biosTargetOperatingSystem,
            BiosVersion:vals.biosVersion,
            CsAdminPasswordStatus: vals.csAdminPasswordStatus,
            CsAutomaticManagedPagefile: vals.csAutomaticManagedPagefile,
            CsAutomaticResetBootOption: vals.csAutomaticResetBootOption,
            CsAutomaticResetCapability:vals.csAutomaticResetCapability,
            CsBootOptionOnLimit: vals.csBootOptionOnLimit,
            CsBootOptionOnWatchDog: vals.csBootOptionOnWatchDog,
            CsBootROMSupported: vals.csBootROMSupported,
            CsBootStatus:vals.csBootStatus,
            CsBootupState: vals.csBootupState,
            CsCaption: vals.csCaption,
            CsChassisBootupState: vals.csChassisBootupState,
            CsChassisSKUNumber:vals.csChassisSKUNumber,
            CsCurrentTimeZone: vals.csCurrentTimeZone,
            CsDaylightInEffect: vals.csDaylightInEffect,
            CsDescription: vals.csDescription,
            CsDNSHostName:vals.csDNSHostName,
            CsDomain: vals.csDomain,
            CsDomainRole: vals.csDomainRole,
            CsEnableDaylightSavingsTime: vals.csEnableDaylightSavingsTime,
            CsFrontPanelResetStatus:vals.csFrontPanelResetStatus,
            CsHypervisorPresent: vals.csHypervisorPresent,
            CsInfraredSupported: vals.csInfraredSupported,
            CsInitialLoadInfo: vals.csInitialLoadInfo,
            CsInstallDate:vals.csInstallDate,
            CsKeyboardPasswordStatus: vals.csKeyboardPasswordStatus,
            CsLastLoadInfo: vals.csLastLoadInfo,
            CsManufacturer: vals.csManufacturer,
            CsModel:vals.csModel,
            CsName: vals.csName,
            CsNetworkAdapters: vals.csNetworkAdapters,
            CsNetworkServerModeEnabled: vals.csNetworkServerModeEnabled,
            CsNumberOfLogicalProcessors:vals.csNumberOfLogicalProcessors,
            CsNumberOfProcessors: vals.csNumberOfProcessors,
            CsProcessors: vals.csProcessors,
            CsOEMStringArray: vals.csOEMStringArray,
            CsPartOfDomain:vals.csPartOfDomain,
            CsPauseAfterReset: vals.csPauseAfterReset,
            CsPCSystemType: vals.csPCSystemType,
            CsPCSystemTypeEx: vals.csPCSystemTypeEx,
            CsPowerManagementCapabilities:vals.csPowerManagementCapabilities,
            CsPowerManagementSupported: vals.csPowerManagementSupported,
            CsPowerOnPasswordStatus: vals.csPowerOnPasswordStatus,
            CsPowerState: vals.csPowerState,
            CsPowerSupplyState:vals.csPowerSupplyState,
            CsPrimaryOwnerContact: vals.csPrimaryOwnerContact,
            CsPrimaryOwnerName: vals.csPrimaryOwnerName,
            CsResetCapability: vals.csResetCapability,
            CsResetCount:vals.csResetCount,
            CsResetLimit: vals.csResetLimit,
            CsRoles: vals.csRoles,
            CsStatus:vals.csStatus,

            CsSupportContactDescription: vals.csSupportContactDescription,
            CsSystemFamily: vals.csSystemFamily,
            CsSystemSKUNumber:vals.csSystemSKUNumber,

            CsSystemType: vals.csSystemType,
            CsThermalState: vals.csThermalState,
            CsTotalPhysicalMemory:vals.csTotalPhysicalMemory,

            CsPhyicallyInstalledMemory: vals.csPhyicallyInstalledMemory,
            CsUserName: vals.csUserName,
            CsWakeUpType:vals.csWakeUpType,

            CsWorkgroup: vals.csWorkgroup,
            OsName: vals.osName,
            OsType:vals.osType,

            OsOperatingSystemSKU: vals.osOperatingSystemSKU,
            OsVersion: vals.osVersion,
            OsCSDVersion:vals.osCSDVersion,

            OsBuildNumber: vals.osBuildNumber,
            OsHotFixes: vals.osHotFixes,
            OsBootDevice:vals.osBootDevice,
            OsSystemDevice: vals.osSystemDevice,
            OsSystemDirectory: vals.osSystemDirectory,
            OsSystemDrive:vals.osSystemDrive,
            OsWindowsDirectory: vals.osWindowsDirectory,
            OsCountryCode: vals.osCountryCode,
            OsCurrentTimeZone:vals.osCurrentTimeZone,
            OsLocaleID: vals.osLocaleID,
            OsLocale: vals.osLocale,
            OsLocalDateTime:vals.osLocalDateTime,
            OsLastBootUpTime: vals.osLastBootUpTime,
            OsUptime: vals.osUptime,
            OsBuildType:vals.osBuildType,
            OsCodeSet: vals.osCodeSet,
            OsDataExecutionPreventionAvailable: vals.osDataExecutionPreventionAvailable,
            OsDataExecutionPrevention32BitApplications:vals.osDataExecutionPrevention32BitApplications,
            OsDataExecutionPreventionDrivers: vals.osDataExecutionPreventionDrivers,
            OsDataExecutionPreventionSupportPolicy: vals.osDataExecutionPreventionSupportPolicy,
            OsDebug:vals.osDebug,
            OsDistributed: vals.osDistributed,
            OsEncryptionLevel: vals.osEncryptionLevel,
            OsForegroundApplicationBoost:vals.osForegroundApplicationBoost,
            OsTotalVisibleMemorySize:vals.osTotalVisibleMemorySize,
            OsFreePhysicalMemory: vals.osFreePhysicalMemory,
            OsTotalVirtualMemorySize: vals.osTotalVirtualMemorySize,
            OsFreeVirtualMemory:vals.osFreeVirtualMemory,

            OsInUseVirtualMemory:vals.osInUseVirtualMemory,
            OsTotalSwapSpaceSize: vals.osTotalSwapSpaceSize,
            OsSizeStoredInPagingFiles: vals.osSizeStoredInPagingFiles,
            OsFreeSpaceInPagingFiles:vals.osFreeSpaceInPagingFiles,

            OsPagingFiles:vals.osPagingFiles,
            OsHardwareAbstractionLayer: vals.osHardwareAbstractionLayer,
            OsInstallDate: vals.osInstallDate,
            OsManufacturer:vals.osManufacturer,

            OsMaxNumberOfProcesses:vals.osMaxNumberOfProcesses,
            OsMaxProcessMemorySize: vals.osMaxProcessMemorySize,
            OsMuiLanguages: vals.osMuiLanguages,
            OsNumberOfLicensedUsers:vals.osNumberOfLicensedUsers,

            OsNumberOfProcesses:vals.osNumberOfProcesses,
            OsNumberOfUsers: vals.osNumberOfUsers,
            OsOrganization: vals.osOrganization,
            OsArchitecture:vals.osArchitecture,

            OsLanguage:vals.osLanguage,
            OsProductSuites: vals.osProductSuites,
            OsOtherTypeDescription: vals.osOtherTypeDescription,
            OsPAEEnabled:vals.osPAEEnabled,
            OsPortableOperatingSystem:vals.osPortableOperatingSystem,
            OsPrimary: vals.osPrimary,
            OsProductType: vals.osProductType,
            OsRegisteredUser:vals.osRegisteredUser,

            OsSerialNumber:vals.osSerialNumber,
            OsServicePackMajorVersion: vals.osServicePackMajorVersion,
            OsServicePackMinorVersion: vals.osServicePackMinorVersion,
            OsStatus:vals.osStatus,

            OsSuites:vals.osSuites,
            OsServerLevel: vals.osServerLevel,
            KeyboardLayout: vals.keyboardLayout,
            TimeZone:vals.timeZone,

            LogonServer:vals.logonServer,
            PowerPlatformRole: vals.powerPlatformRole,
            HyperVisorPresent: vals.hyperVisorPresent,
            HyperVRequirementDataExecutionPreventionAvailable:vals.hyperVRequirementDataExecutionPreventionAvailable,
            HyperVRequirementSecondLevelAddressTranslation:vals.hyperVRequirementSecondLevelAddressTranslation,
            HyperVRequirementVirtualizationFirmwareEnabled: vals.hyperVRequirementVirtualizationFirmwareEnabled,
            HyperVRequirementVMMonitorModeExtensions: vals.hyperVRequirementVMMonitorModeExtensions,
            DeviceGuardSmartStatus:vals.deviceGuardSmartStatus,
            DeviceGuardRequiredSecurityProperties:vals.deviceGuardRequiredSecurityProperties,
            DeviceGuardAvailableSecurityProperties: vals.deviceGuardAvailableSecurityProperties,
            DeviceGuardSecurityServicesConfigured: vals.deviceGuardSecurityServicesConfigured,
            DeviceGuardSecurityServicesRunning:vals.deviceGuardSecurityServicesRunning,
            DeviceGuardCodeIntegrityPolicyEnforcementStatus:vals.deviceGuardCodeIntegrityPolicyEnforcementStatus,
            DeviceGuardUserModeCodeIntegrityPolicyEnforcementStatus: vals.deviceGuardUserModeCodeIntegrityPolicyEnforcementStatus,
         
        }
    ))


    const headingStyle={ fontFamily:"Nunito" , fontWeight:"bold"}
    const boxStyle={backgroundColor:"whitesmoke" , marginTop:"7vh"}
  return (
    <div>
        <div>
            <NavBar />
        </div>

            <Grid container style={tableStyle}>
                <Grid item xs={16} sx={{textAlign:"center"}}>
                    <span style={headingStyle}><h3>Computer Info Table</h3></span>
                </Grid>
            </Grid>


            <Box sx={{ height: 400, width: '100%' }} style={boxStyle}>
            
                <DataGrid
                    rows={rows}
                    columns={columns}
                    disableColumnMenu 
                    pageSize={5}
                    rowsPerPageOptions={[5]}
                    checkboxSelection
                    disableSelectionOnClick
                    components={{
                        Toolbar: GridToolbar,
                      }}
                    sx={{ '& .MuiDataGrid-columnHeaderTitle':{
                        fontWeight:"bold",
                        fontFamily:"Nunito",
                        fontVariant:"all-small-caps",
                        fontSize:"large",
                        textDecoration:"underline",},
                        '& .MuiDataGrid-columnSeparator':{
                                color:"black"
                        },
                  
                      }}
                    getRowClassName={(params) =>
                    params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'even'
                    }
                    showCellRightBorder
                    showColumnRightBorder
                    
                />
            
            </Box>
        
    </div>
  )
}

export default ComputerInfo